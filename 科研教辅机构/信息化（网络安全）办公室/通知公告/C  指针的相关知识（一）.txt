C | 指针的相关知识（一）
指针的概念
什么是指针呢？

计算机内存中内存单元的编号就是指针。

在计算机的内存中，内存被划分成为许许多多的内存单元，每一个内存单元可以成为一个字节，而每一个字节都对应有一个编号，我们通过这个编号就可以找到这个内存单元。

就像我们知道了某一地址，就可以找到地址对应的那个房子一样。

所以，内存单元的编号可以就相是地址，而地址又可以形象的称为指针。



另外，我们也经常把指针变量简称为指针。

与整型、浮点型数据类型一样，地址（指针）也需要一种数据类型来存放，那么这种用于存放地址的变量就成为指针变量。

我们经常简称为指针。

指针（变量）是用来存放地址（指针）的。

指针和指针类型
指针类型
我们都知道，变量有不同的类型，整形，浮点型等。

那么指针变量也有对应的数据类型。

我们可以通过指针（地址）来找到一个空间，这个空间是什么样的数据类型，那么这个指针（变量）也就对应着同一个数据类型。

栗子如下：

int main()
{

int a = 10;//
在内存中开辟一块整型空间
int* p;//
这里的
int*
是一种数据类型，用来定义了一个名为
p
的指针变量
p = &a;//&
这个符号叫做取地址符，用来取出
a
变量的地址，并把这个地址赋值给了
p

return 0;
}
int main()
{
int i = 0;
char c = 0;
short s = 0;
float f = 0;
double d = 0;

int* pi = &i;
char* pc = &c;
short* ps = &s;
float* pf = &f;
double* pd = &d;

return 0;
}
通过上述代码我们可以知道，不同类型的变量的地址，都用对应类型的指针变量来存放。

野指针和空指针
野指针
什么是野指针？

野指针就是指针指向的位置是不可知的（随机的、不正确的、没有明确限制的）

形成野指针的原因有很多

指针未初始化
#include <stdio.h>
int main()
{
int* p;//
局部变量指针未初始化，默认为随机值
*p = 20;
return 0;
}
指针越界访问
#include <stdio.h>
int main()
{
int arr[10] = { 0 };
int* p = arr;
int i = 0;
for (i = 0; i <= 11; i++)
{
//
当指针指向的范围超出数组
arr
的范围时，
p
就是野指针
*(p++) = i;
}
return 0;
}
指针指向的空间释放
这里需要掌握动态内存的知识，就不展开讲解了。

有兴趣的小伙伴可以自行学习。

空指针
空指针就是地址为
0
的指针。

每一个地址都是一串数字编号，当这个编号为
0
的时候，就叫做空指针。

空指针用
NULL
来表示。

注意！

空指针一定要全部大写！
NULL
！

如何规避野指针
了解了什么是野指针和空指针，那么我们该如何避免野指针的产生呢？

指针初始化
小心指针越界
指针指向空间释放即使置
NULL
避免返回局部变量的地址
指针使用之前检查有效性
//
检查指针的有效性
#include <stdio.h>
int main()
{
int *p = NULL;
//....
int a = 10;
p = &a;
if(p != NULL)
{
*p = 20;
}
return 0;
}
指针的运算
我们都知道指针也有对应的类型，那么指针的这些类型有什么用呢？

答案

1.指针的类型决定了指针向前或者向后走一步有多大（距离）。
2.指针的类型决定了，对指针解引用的时候有多大的权限（能操作几个字节）。
（比如：
char*
的指针解引用就只能访问一个字节，而
int*
的指针的解引用就能访问四个字节。）
指针加减整数
指针类型决定指针向前或者向后走多大的距离，体现在指针加减整数和指针减去指针上。

演示代码如下：

#include <stdio.h>
//
演示实例
int main()
{
int n = 10;
char *pc = (char*)&n;
int *pi = &n;
printf(%p\n, &n);
printf(%p\n, pc);
printf(%p\n, pc+1);
printf(%p\n, pi);
printf(%p\n, pi+1);
return
0;
}


上述代码的运行结果如图，我们可以知道，当指针类型为字符指针时，指针
+1
只能跳过
1
个字节的大小；而指针类型为整型的时候，每次
+1
就能跳过
4
个字节的大小
.

同样的，指针减去指针的时候，表示两个指针之间相差了多少个对应数据类型的元素。

int main()
{
int arr[10];

int* p1 = &arr[0];
int* p2 = &arr[4];

int n = p2 - p1;
printf(%d\n, n);

return 0;
}
上述代码的结果为
4
；则表示这两个指针之间相差了
4
个整型元素。

指针和数组
我在数组的相关知识里也讲到，数组名大多数情况下就表示首元素的地址。

除了两种特殊情况。

sizeof
（数组名）
&
数组名
我们可以通过下标来访问数组的元素，我们也可以通过
*
解引用来访问数组的元素，其实这两者时等价的哦！

假设数组名为
arr
，那么
arr[ i ]
等价于
*
（
arr+i
）。

在这里我就不展开啦，感兴趣的小伙伴可以看看我之前写的关于数组的博客哦
~

数组的相关知识（一）

数组的相关知识（二）

二级指针和多级指针
二级指针
指针变量也是变量，是变量就有地址，那指针变量的地址存放在哪里？

答案是存放到二级指针里。


int main()
{
int n = 10;
int* p = &n;
int** pp = &p;

return 0;
}
通过上图和上面的代码，我们可以知道，
n
的地址放在了
p
中，
p
的地址放在了
pp
中，此时，
p
就是一个一级指针，
pp
就是一个二级指针。

多级指针
同样的，二级指针也有自己的地址，用来存放二级指针地址的变量就是三级指针。

以此类推，就会有四级、五级、六级等指针，但是这样就过于复杂了，我们了解即可，也没必要研究那么深入。
————————————————
版权声明：本文为
CSDN
博主「
Ersansui
」的原创文章，遵循
CC 4.0 BY-SA
版权协议，转载请附上原文出处链接及本声明。
原文链接：
https://blog.csdn.net/weixin_61021362/article/details/120642262
