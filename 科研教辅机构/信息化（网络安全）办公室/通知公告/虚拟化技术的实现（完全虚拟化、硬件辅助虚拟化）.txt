虚拟化技术的实现（完全虚拟化、硬件辅助虚拟化）


内核，是指的操作系统内核。
所有的操作系统都有内核，无论是
Windows
还是
Linux
，都管理着三个重要的资源：计算，网络，存储。
计算指
CPU
和内存，网络即网络设备，存储即硬盘之类的。
内核是个大管家，想象你的机器上跑着很多的程序，有
word
，有
excel
，看着视频，听着音乐，每个程序都要使用
CPU
和内存，都要上网，都要存硬盘，如果没有一个大管家管着，大家随便用，就乱了。所以需要管家来协调调度整个资源，谁先用，谁后用，谁用多少，谁放在这里，谁放在那里，都需要管家操心。
所以在这个计算机大家庭里面，管家有着比普通的程序更高的权限，运行在内核态，而其他的普通程序运行在用户态，用户态的程序一旦要申请公共的资源，就需要向管家申请，管家帮它分配好，它才能用。
为了区分内核态和用户态，
CPU
专门设置四个特权等级
0,1,2,3
来做这个事情。
当时写
Linux
内核的时候，估计大牛们还不知道将来虚拟机会大放异彩，大牛们想，一共两级特权，一个内核态，一个用户态，却有四个等级，好奢侈，好富裕，就敞开了用，内核态运行在第
0
等级，用户态运行在第
3
等级，占了两头，太不会过日子了。
大牛们在写
Linux
内核的时候，如果用户态程序做事情，就将扳手掰到第
3
等级，一旦要申请使用更多的资源，就需要申请将扳手掰到第
0
等级，内核才能在高权限访问这些资源，申请完资源，返回到用户态，扳手再掰回去。
这个程序一直非常顺利的运行着，直到虚拟机的出现。
如果大家用过
Vmware
桌面版，或者
Virtualbox
桌面版，你可以用这个虚拟化软件创建虚拟机，在虚拟机里面安装一个
Linux
或者
windows
，外面的操作系统也可以是
Linux
或者
Windows
。
当你使用虚拟机软件的时候，和你的
excel
一样，都是在你的任务栏里面并排的放着，是一个普通的应用。
当你进入虚拟机的时候，虚拟机里面的
excel
也是一个普通的应用。
但是当你设身处地的站在虚拟机里面的内核的角度思考一下人生，你就困惑了，我到底个啥？
在硬件上的操作系统来看，我是一个普通的应用，只能运行在用户态。可是大牛们生我的时候，我的每一行代码，都告诉我，我是个内核啊，应该运行在内核态，当虚拟机里面的
excel
要访问网络的时候，向我请求，我的代码就要努力的去操作网络资源，我努力，但是我做不到，我没有权限！
我分裂了。
虚拟化层，也就是
Vmware
或者
Virtualbox
需要帮我解决这个问题。
第一种方式，完全虚拟化，其实就是骗我。虚拟化软件模拟假的
CPU
，内存，网络，硬盘给我，让我自我感觉良好，终于又像个内核了。
真正的工作模式是这样的。

虚拟机内核：我要在
CPU
上跑一个指令！

虚拟化软件：没问题，你是内核嘛，可以跑

虚拟化软件转过头去找物理机内核：报告管家，我管理的虚拟机里面的一个要执行一个
CPU
指令，帮忙来一小段时间空闲的
CPU
时间，让我代他跑个指令。

物理机内核：你等着，另一个跑着呢。好嘞，他终于跑完了，该你了。

虚拟化软件：我代他跑，终于跑完了，出来结果了

虚拟化软件转头给虚拟机内核：哥们，跑完了，结果是这个，我说你是内核吧，绝对有权限，没问题，下次跑指令找我啊。

虚拟机内核：看来我真的是内核呢。可是哥，好像这点指令跑的有点慢啊。

虚拟化软件：这就不错啦，好几个排着队跑呢。
内存的申请模式如下。
虚拟机内核：我启动需要
4G
内存，我好分给我上面的应用。
虚拟化软件：没问题，才
4G
，你是内核嘛，马上申请好。
虚拟化软件转头给物理机内核：报告，管家，我启动了一个虚拟机，需要
4G
内存，给我
4
个房间呗。
物理机内核：怎么又一个虚拟机啊，好吧，给你
90,91,92,93
四个房间。
虚拟化软件转头给虚拟机内核：哥们，内存有了，
0,1,2,3
这个四个房间都是你的，你看，你是内核嘛，独占资源，从
0
编号的就是你的。
虚拟机内核：看来我真的是内核啊，能从头开始用。那好，我就在房间
2
的第三个柜子里面放个东西吧。
虚拟化软件：要放东西啊，没问题。心里想：我查查看，这个虚拟机是
90
号房间开头的，他要在房间
2
放东西，那就相当于在房间
92
放东西。
虚拟化软件转头给物理机内核：报告，管家，我上面的虚拟机要在
92
号房间的第三个柜子里面放个东西。
好了，说完了
CPU
和内存的例子，不细说网络和硬盘了，也是类似，都是虚拟化软件模拟一个给虚拟机内核看的，其实啥事儿都需要虚拟化软件转一遍。
这种方式一个坏处，就是慢，往往慢到不能忍受。
于是虚拟化软件想，我能不能不当传话筒，还是要让虚拟机内核正视自己的身份，别说你是内核，你还真喘上了，你不是物理机，你是虚拟机。
但是怎么解决权限等级的问题呢？于是
Intel
的
VT-x
和
AMD
的
AMD-V
从硬件层面帮上了忙。当初谁让你们这些写内核的大牛用等级这么奢侈，用完了
0
，就是
3
，也不省着点用，没办法，只好另起炉灶弄一个新的标志位，表示当前是在虚拟机状态下，还是真正的物理机内核下。
对于虚拟机内核来讲，只要将标志位设为虚拟机状态，则可以直接在
CPU
上执行大部分的指令，不需要虚拟化软件在中间转述，除非遇到特别敏感的指令，才需要将标志位设为物理机内核态运行，这样大大提高了效率。
所以安装虚拟机的时候，务必要将物理
CPU
的这个标志位打开，是否打开对于
Intel
可以查看
grep “vmx” /proc/cpuinfo
，对于
AMD
可以查看
grep “svm” /proc/cpuinfo
这叫做硬件辅助虚拟化。
另外就是访问网络或者硬盘的时候，为了取得更高的性能，也需要让虚拟机内核加载特殊的驱动，也是让虚拟机内核从代码层面就重新定位自己的身份，不能像访问物理机一样访问网络或者硬盘，而是用一种特殊的方式：我知道我不是物理机内核，我知道我是虚拟机，我没那么高的权限，我很可能和很多虚拟机共享物理资源，所以我要学会排队，我写硬盘其实写的是一个物理机上的文件，那我的写文件的缓存方式是不是可以变一下，我发送网络包，根本就不是发给真正的网络设备，而是给虚拟的设备，我可不可以直接在内存里面拷贝给他，等等等等。
一旦我知道我不是物理机内核，痛定思痛，只好重新认识自己，反而能找出很多方式来优化我的资源访问。
这叫做类虚拟化或者半虚拟化。
————————————————
版权声明：本文为
CSDN
博主「粥粥同学」的原创文章，遵循
CC 4.0 BY-SA
版权协议，转载请附上原文出处链接及本声明。
原文链接：
https://blog.csdn.net/gui951753/article/details/81507924
